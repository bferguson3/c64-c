ca65 V2.19 - Git 5f8d16304
Main file   : build/main.s
Current file: build/main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 5f8d16304
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 5f8d16304"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_print
000000r 1               	.export		_a
000000r 1               	.export		_WaitVBLANK
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               _a:
000000r 1  C8 45 4C 4C  	.byte	$C8,$45,$4C,$4C,$4F,$20,$D7,$4F,$52,$4C,$44,$21,$00
000004r 1  4F 20 D7 4F  
000008r 1  52 4C 44 21  
00000Dr 1               
00000Dr 1               .segment	"BSS"
000000r 1               
000000r 1               _g_charsetMode:
000000r 1  00           	.res	1,$00
000001r 1               
000001r 1               ; ---------------------------------------------------------------
000001r 1               ; void __near__ print (const unsigned char *a)
000001r 1               ; ---------------------------------------------------------------
000001r 1               
000001r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_print: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  20 rr rr     	jsr     decsp5
000006r 1  4C rr rr     	jmp     L0004
000009r 1  A0 00        L0002:	ldy     #$00
00000Br 1  A2 00        	ldx     #$00
00000Dr 1  B1 rr        	lda     (sp),y
00000Fr 1  A0 00        	ldy     #$00
000011r 1  A2 00        	ldx     #$00
000013r 1  18           	clc
000014r 1  A9 01        	lda     #$01
000016r 1  71 rr        	adc     (sp),y
000018r 1  91 rr        	sta     (sp),y
00001Ar 1  A0 06        L0004:	ldy     #$06
00001Cr 1  20 rr rr     	jsr     ldaxysp
00001Fr 1  20 rr rr     	jsr     pushax
000022r 1  A0 02        	ldy     #$02
000024r 1  A2 00        	ldx     #$00
000026r 1  B1 rr        	lda     (sp),y
000028r 1  20 rr rr     	jsr     tosaddax
00002Br 1  A0 00        	ldy     #$00
00002Dr 1  20 rr rr     	jsr     ldauidx
000030r 1  C9 00        	cmp     #$00
000032r 1  20 rr rr     	jsr     boolne
000035r 1  D0 D2        	jne     L0002
000037r 1  A2 04        	ldx     #$04
000039r 1  A9 00        	lda     #$00
00003Br 1  A0 03        	ldy     #$03
00003Dr 1  20 rr rr     	jsr     staxysp
000040r 1  A2 00        	ldx     #$00
000042r 1  AD rr rr     	lda     _g_charsetMode
000045r 1  C9 00        	cmp     #$00
000047r 1  20 rr rr     	jsr     booleq
00004Ar 1  D0 03 4C rr  	jeq     L0005
00004Er 1  rr           
00004Fr 1  4C rr rr     	jmp     L0009
000052r 1  A2 00        L0005:	ldx     #$00
000054r 1  AD rr rr     	lda     _g_charsetMode
000057r 1  C9 01        	cmp     #$01
000059r 1  20 rr rr     	jsr     booleq
00005Cr 1  D0 03 4C rr  	jeq     L0009
000060r 1  rr           
000061r 1  A2 00        	ldx     #$00
000063r 1  A9 00        	lda     #$00
000065r 1  A0 02        	ldy     #$02
000067r 1  91 rr        	sta     (sp),y
000069r 1  A0 02        L0008:	ldy     #$02
00006Br 1  A2 00        	ldx     #$00
00006Dr 1  B1 rr        	lda     (sp),y
00006Fr 1  20 rr rr     	jsr     pushax
000072r 1  A0 02        	ldy     #$02
000074r 1  A2 00        	ldx     #$00
000076r 1  B1 rr        	lda     (sp),y
000078r 1  20 rr rr     	jsr     tosultax
00007Br 1  F0 03 4C rr  	jne     L000B
00007Fr 1  rr           
000080r 1  4C rr rr     	jmp     L0009
000083r 1  A0 06        L000B:	ldy     #$06
000085r 1  20 rr rr     	jsr     ldaxysp
000088r 1  20 rr rr     	jsr     pushax
00008Br 1  A0 04        	ldy     #$04
00008Dr 1  A2 00        	ldx     #$00
00008Fr 1  B1 rr        	lda     (sp),y
000091r 1  20 rr rr     	jsr     tosaddax
000094r 1  A0 00        	ldy     #$00
000096r 1  20 rr rr     	jsr     ldauidx
000099r 1  A0 01        	ldy     #$01
00009Br 1  91 rr        	sta     (sp),y
00009Dr 1  A0 01        	ldy     #$01
00009Fr 1  A2 00        	ldx     #$00
0000A1r 1  B1 rr        	lda     (sp),y
0000A3r 1  C9 C0        	cmp     #$C0
0000A5r 1  A9 00        	lda     #$00
0000A7r 1  A2 00        	ldx     #$00
0000A9r 1  2A           	rol     a
0000AAr 1  D0 03 4C rr  	jeq     L000D
0000AEr 1  rr           
0000AFr 1  A0 01        	ldy     #$01
0000B1r 1  A2 00        	ldx     #$00
0000B3r 1  B1 rr        	lda     (sp),y
0000B5r 1  C9 E0        	cmp     #$E0
0000B7r 1  20 rr rr     	jsr     boolult
0000BAr 1  F0 03 4C rr  	jne     L000E
0000BEr 1  rr           
0000BFr 1  A2 00        L000D:	ldx     #$00
0000C1r 1  A9 00        	lda     #$00
0000C3r 1  D0 03 4C rr  	jeq     L000F
0000C7r 1  rr           
0000C8r 1  A2 00        L000E:	ldx     #$00
0000CAr 1  A9 01        	lda     #$01
0000CCr 1  D0 03 4C rr  L000F:	jeq     L000C
0000D0r 1  rr           
0000D1r 1  A0 01        	ldy     #$01
0000D3r 1  A2 00        	ldx     #$00
0000D5r 1  B1 rr        	lda     (sp),y
0000D7r 1  38           	sec
0000D8r 1  E9 80        	sbc     #$80
0000DAr 1  91 rr        	sta     (sp),y
0000DCr 1  4C rr rr     	jmp     L0011
0000DFr 1  A0 01        L000C:	ldy     #$01
0000E1r 1  A2 00        	ldx     #$00
0000E3r 1  B1 rr        	lda     (sp),y
0000E5r 1  C9 40        	cmp     #$40
0000E7r 1  A9 00        	lda     #$00
0000E9r 1  A2 00        	ldx     #$00
0000EBr 1  2A           	rol     a
0000ECr 1  D0 03 4C rr  	jeq     L0012
0000F0r 1  rr           
0000F1r 1  A0 01        	ldy     #$01
0000F3r 1  A2 00        	ldx     #$00
0000F5r 1  B1 rr        	lda     (sp),y
0000F7r 1  C9 60        	cmp     #$60
0000F9r 1  20 rr rr     	jsr     boolult
0000FCr 1  F0 03 4C rr  	jne     L0013
000100r 1  rr           
000101r 1  A2 00        L0012:	ldx     #$00
000103r 1  A9 00        	lda     #$00
000105r 1  D0 03 4C rr  	jeq     L0014
000109r 1  rr           
00010Ar 1  A2 00        L0013:	ldx     #$00
00010Cr 1  A9 01        	lda     #$01
00010Er 1  D0 03 4C rr  L0014:	jeq     L0011
000112r 1  rr           
000113r 1  A0 01        	ldy     #$01
000115r 1  A2 00        	ldx     #$00
000117r 1  B1 rr        	lda     (sp),y
000119r 1  38           	sec
00011Ar 1  E9 40        	sbc     #$40
00011Cr 1  91 rr        	sta     (sp),y
00011Er 1  A0 04        L0011:	ldy     #$04
000120r 1  20 rr rr     	jsr     ldaxysp
000123r 1  20 rr rr     	jsr     pushax
000126r 1  A0 03        	ldy     #$03
000128r 1  A2 00        	ldx     #$00
00012Ar 1  B1 rr        	lda     (sp),y
00012Cr 1  A0 00        	ldy     #$00
00012Er 1  20 rr rr     	jsr     staspidx
000131r 1  A0 03        	ldy     #$03
000133r 1  A2 00        	ldx     #$00
000135r 1  A9 01        	lda     #$01
000137r 1  20 rr rr     	jsr     addeqysp
00013Ar 1  A0 02        	ldy     #$02
00013Cr 1  A2 00        	ldx     #$00
00013Er 1  B1 rr        	lda     (sp),y
000140r 1  A0 02        	ldy     #$02
000142r 1  A2 00        	ldx     #$00
000144r 1  18           	clc
000145r 1  A9 01        	lda     #$01
000147r 1  71 rr        	adc     (sp),y
000149r 1  91 rr        	sta     (sp),y
00014Br 1  4C rr rr     	jmp     L0008
00014Er 1  20 rr rr     L0009:	jsr     incsp7
000151r 1  60           	rts
000152r 1               
000152r 1               .endproc
000152r 1               
000152r 1               ; ---------------------------------------------------------------
000152r 1               ; void __near__ WaitVBLANK (void)
000152r 1               ; ---------------------------------------------------------------
000152r 1               
000152r 1               .segment	"CODE"
000152r 1               
000152r 1               .proc	_WaitVBLANK: near
000152r 1               
000152r 1               .segment	"CODE"
000152r 1               
000152r 1  AD 11 D0     L0002:	lda     $d011
000155r 1  29 80        	and     #$80
000157r 1  F0 F9        	beq     L0002
000159r 1  AD 11 D0     L0003:	lda     $d011
00015Cr 1  29 80        	and     #$80
00015Er 1  D0 F9        	bne     L0003
000160r 1  60           	rts
000161r 1               
000161r 1               .endproc
000161r 1               
000161r 1               ; ---------------------------------------------------------------
000161r 1               ; void __near__ main (void)
000161r 1               ; ---------------------------------------------------------------
000161r 1               
000161r 1               .segment	"CODE"
000161r 1               
000161r 1               .proc	_main: near
000161r 1               
000161r 1               .segment	"CODE"
000161r 1               
000161r 1  A9 17        	lda     #23
000163r 1  8D 18 D0     	sta     $d018
000166r 1  A2 00        	ldx     #$00
000168r 1  A9 01        	lda     #$01
00016Ar 1  8D rr rr     	sta     _g_charsetMode
00016Dr 1  A9 rr        	lda     #<(_a)
00016Fr 1  A2 rr        	ldx     #>(_a)
000171r 1  20 rr rr     	jsr     _print
000174r 1  4C rr rr     	jmp     L0004
000177r 1  20 rr rr     L0002:	jsr     _WaitVBLANK
00017Ar 1  EE 20 D0     	inc     $d020
00017Dr 1  4C rr rr     L0004:	jmp     L0002
000180r 1  60           	rts
000181r 1               
000181r 1               .endproc
000181r 1               
000181r 1               
